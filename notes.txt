DO NOT OVEROPTIMISE!

fixes needed

- ensure the board can be resizable
- via for grounf plane, and zone
- vias from the same net could have drill hole to close to each other on the same bus connection 
- move the corner zone logic to the board, instead of the busrouter
- zone positioning rouding errors Point: (45.0, 34.000001), Resolution: 0.25

- keep out zones of the Jacdac holes cannot overlap with the buses - shoves the routing around, and causes clearance issues 
        -> make the keep-out zones as small as possible on the to ensure no overlap
        -> make a keep out zone for the bus
        -> throw an error message when a keepout zone overlaps with the bus


On Saturday 
- ensure that for a net that has a copper fill (in this case the GND), that there is no bus created for it - DONE
- there is still issues with via clearance on the bus connections - hopefully DONE

General things to implement 
- point to point routing
- create a Router class if the functionality overlaps
- bom consolidation, checking for repetitive values (and replacing with the previous part number), reshuffling of reference designators


optimise and cleanup
in bus router, when referencing any nets, need to reference only the layer objects, and not the gerbersockets


- cleanup the objects
- routing on inner layers

imrovements preferable

- merge/consolidate overlapping segments - hard to do properly!
- support the bus on the right side as well 
- shorten the buses to a minimum after all connections are placed?
- make it configurable to set which nets are to be routed with buses, and which to be routed with normal routing - for now hardcode





in Board class

take the extracted socket information
sort out which nets connect how

identify which nets are routed by which router 
store all of the paths


So I want to fix the route() function in my code (pasted).



Here is an example. A PCB has 2 modules, and both modules has 4 sockets. Both modules have all their sockets on the lower edge of the their respective zone. 

The 8 sockets, even though they are all on the same row index, they get grouped according to which keep-out zone they are on.

Once we have these socket groups, I wanto organise the order of routing based on their distance from board edge (whether left or right).

Within socket groups, I would like to organise them top to bottom.

Let the routing begin, and the pathfinding will attempt to find it's path. 

If the pathfinding for a particular socket fails, I would like to go back and remove the path indices and via index of the previous rouitng attempt.

At this point, I need to keep track of which socket (let's call it BOBA) was removed. Now will come the re-order stage. 

Now I will need to flip the order in which the sockets are routed, but only from the socket BOBA to the end of the list within that socket group. 

And continue routing from there, following the same above pattern. 

If a routing fails at the same place, even after re-ordering from the point of failure -1 socket, than continue to the next socket group.


So back at our example, Lets say one of the modules has 4 sockets grouped together, ABCD.

AB get routed, but C fails.

Now we need to go back, remove B paths, flip the order to ADCB, and try again.


1. Get the nets for the tracks layer
2. Get the 







From fronted to be corrected

- no need for manufacturing options



    {
      "name": "ec30_3x3_l_mh_0.1",
      "position": { "x": -20, "y": 50.75 },
      "rotation": 270
    },
    {
      "name": "ec30_3x3_l_mh_0.1",
      "position": { "x": -20, "y": 0.75 },
      "rotation": 270
    },
    {
      "name": "ec30_3x3_l_mh_0.1",
      "position": { "x": -20, "y": -50.25 },
      "rotation": 270
    },
    {
      "name": "ec30_3x3_l_mh_0.1",
      "position": { "x": 30, "y": 50.25 },
      "rotation": 270
    },
    {
      "name": "ec30_3x3_l_mh_0.1",
      "position": { "x": 30, "y": 0.5 },
      "rotation": 270
    },
    {
      "name": "ec30_3x3_l_mh_0.1",
      "position": { "x": 30, "y": -50.75 },
      "rotation": 270
    },
    {
      "name": "ec30_3x3_l_mh_0.1",
      "position": { "x": 80, "y": 50.25 },
      "rotation": 270
    },
    {
      "name": "ec30_3x3_l_mh_0.1",
      "position": { "x": 80, "y": 0 },
      "rotation": 270
    },
    {
      "name": "ec30_3x3_l_mh_0.1",
      "position": { "x": 80, "y": -50.25 },
      "rotation": 270
    }